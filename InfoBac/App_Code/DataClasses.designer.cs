#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18033
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Database")]
public partial class DataClassesDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertDomain(Domain instance);
  partial void UpdateDomain(Domain instance);
  partial void DeleteDomain(Domain instance);
  partial void InsertUser(User instance);
  partial void UpdateUser(User instance);
  partial void DeleteUser(User instance);
  partial void InsertDomainsWeight(DomainsWeight instance);
  partial void UpdateDomainsWeight(DomainsWeight instance);
  partial void DeleteDomainsWeight(DomainsWeight instance);
  partial void InsertQuestion(Question instance);
  partial void UpdateQuestion(Question instance);
  partial void DeleteQuestion(Question instance);
  partial void InsertQuestionsWeight(QuestionsWeight instance);
  partial void UpdateQuestionsWeight(QuestionsWeight instance);
  partial void DeleteQuestionsWeight(QuestionsWeight instance);
  #endregion
	
	public DataClassesDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["DatabaseConnectionString1"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Domain> Domains
	{
		get
		{
			return this.GetTable<Domain>();
		}
	}
	
	public System.Data.Linq.Table<User> Users
	{
		get
		{
			return this.GetTable<User>();
		}
	}
	
	public System.Data.Linq.Table<DomainsWeight> DomainsWeights
	{
		get
		{
			return this.GetTable<DomainsWeight>();
		}
	}
	
	public System.Data.Linq.Table<Question> Questions
	{
		get
		{
			return this.GetTable<Question>();
		}
	}
	
	public System.Data.Linq.Table<QuestionsWeight> QuestionsWeights
	{
		get
		{
			return this.GetTable<QuestionsWeight>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Domains")]
public partial class Domain : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _Name;
	
	private System.Nullable<int> _MasterDomain;
	
	private EntitySet<Domain> _Domains;
	
	private EntitySet<DomainsWeight> _DomainsWeights;
	
	private EntitySet<Question> _Questions;
	
	private EntityRef<Domain> _Domain1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnMasterDomainChanging(System.Nullable<int> value);
    partial void OnMasterDomainChanged();
    #endregion
	
	public Domain()
	{
		this._Domains = new EntitySet<Domain>(new Action<Domain>(this.attach_Domains), new Action<Domain>(this.detach_Domains));
		this._DomainsWeights = new EntitySet<DomainsWeight>(new Action<DomainsWeight>(this.attach_DomainsWeights), new Action<DomainsWeight>(this.detach_DomainsWeights));
		this._Questions = new EntitySet<Question>(new Action<Question>(this.attach_Questions), new Action<Question>(this.detach_Questions));
		this._Domain1 = default(EntityRef<Domain>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MasterDomain", DbType="Int")]
	public System.Nullable<int> MasterDomain
	{
		get
		{
			return this._MasterDomain;
		}
		set
		{
			if ((this._MasterDomain != value))
			{
				if (this._Domain1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnMasterDomainChanging(value);
				this.SendPropertyChanging();
				this._MasterDomain = value;
				this.SendPropertyChanged("MasterDomain");
				this.OnMasterDomainChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Domain_Domain", Storage="_Domains", ThisKey="Id", OtherKey="MasterDomain")]
	public EntitySet<Domain> Domains
	{
		get
		{
			return this._Domains;
		}
		set
		{
			this._Domains.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Domain_DomainsWeight", Storage="_DomainsWeights", ThisKey="Id", OtherKey="Domain")]
	public EntitySet<DomainsWeight> DomainsWeights
	{
		get
		{
			return this._DomainsWeights;
		}
		set
		{
			this._DomainsWeights.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Domain_Question", Storage="_Questions", ThisKey="Id", OtherKey="Domain")]
	public EntitySet<Question> Questions
	{
		get
		{
			return this._Questions;
		}
		set
		{
			this._Questions.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Domain_Domain", Storage="_Domain1", ThisKey="MasterDomain", OtherKey="Id", IsForeignKey=true)]
	public Domain Domain1
	{
		get
		{
			return this._Domain1.Entity;
		}
		set
		{
			Domain previousValue = this._Domain1.Entity;
			if (((previousValue != value) 
						|| (this._Domain1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Domain1.Entity = null;
					previousValue.Domains.Remove(this);
				}
				this._Domain1.Entity = value;
				if ((value != null))
				{
					value.Domains.Add(this);
					this._MasterDomain = value.Id;
				}
				else
				{
					this._MasterDomain = default(Nullable<int>);
				}
				this.SendPropertyChanged("Domain1");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Domains(Domain entity)
	{
		this.SendPropertyChanging();
		entity.Domain1 = this;
	}
	
	private void detach_Domains(Domain entity)
	{
		this.SendPropertyChanging();
		entity.Domain1 = null;
	}
	
	private void attach_DomainsWeights(DomainsWeight entity)
	{
		this.SendPropertyChanging();
		entity.Domain1 = this;
	}
	
	private void detach_DomainsWeights(DomainsWeight entity)
	{
		this.SendPropertyChanging();
		entity.Domain1 = null;
	}
	
	private void attach_Questions(Question entity)
	{
		this.SendPropertyChanging();
		entity.Domain1 = this;
	}
	
	private void detach_Questions(Question entity)
	{
		this.SendPropertyChanging();
		entity.Domain1 = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _UserName;
	
	private string _Email;
	
	private string _Passwrod;
	
	private bool _Admin;
	
	private string _Confirmed;
	
	private int _Note;
	
	private EntitySet<DomainsWeight> _DomainsWeights;
	
	private EntitySet<QuestionsWeight> _QuestionsWeights;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswrodChanging(string value);
    partial void OnPasswrodChanged();
    partial void OnAdminChanging(bool value);
    partial void OnAdminChanged();
    partial void OnConfirmedChanging(string value);
    partial void OnConfirmedChanged();
    partial void OnNoteChanging(int value);
    partial void OnNoteChanged();
    #endregion
	
	public User()
	{
		this._DomainsWeights = new EntitySet<DomainsWeight>(new Action<DomainsWeight>(this.attach_DomainsWeights), new Action<DomainsWeight>(this.detach_DomainsWeights));
		this._QuestionsWeights = new EntitySet<QuestionsWeight>(new Action<QuestionsWeight>(this.attach_QuestionsWeights), new Action<QuestionsWeight>(this.detach_QuestionsWeights));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NChar(50) NOT NULL", CanBeNull=false)]
	public string UserName
	{
		get
		{
			return this._UserName;
		}
		set
		{
			if ((this._UserName != value))
			{
				this.OnUserNameChanging(value);
				this.SendPropertyChanging();
				this._UserName = value;
				this.SendPropertyChanged("UserName");
				this.OnUserNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NChar(50) NOT NULL", CanBeNull=false)]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Passwrod", DbType="NChar(50) NOT NULL", CanBeNull=false)]
	public string Passwrod
	{
		get
		{
			return this._Passwrod;
		}
		set
		{
			if ((this._Passwrod != value))
			{
				this.OnPasswrodChanging(value);
				this.SendPropertyChanging();
				this._Passwrod = value;
				this.SendPropertyChanged("Passwrod");
				this.OnPasswrodChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Admin", DbType="Bit NOT NULL")]
	public bool Admin
	{
		get
		{
			return this._Admin;
		}
		set
		{
			if ((this._Admin != value))
			{
				this.OnAdminChanging(value);
				this.SendPropertyChanging();
				this._Admin = value;
				this.SendPropertyChanged("Admin");
				this.OnAdminChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Confirmed", DbType="NChar(10) NOT NULL", CanBeNull=false)]
	public string Confirmed
	{
		get
		{
			return this._Confirmed;
		}
		set
		{
			if ((this._Confirmed != value))
			{
				this.OnConfirmedChanging(value);
				this.SendPropertyChanging();
				this._Confirmed = value;
				this.SendPropertyChanged("Confirmed");
				this.OnConfirmedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="Int NOT NULL")]
	public int Note
	{
		get
		{
			return this._Note;
		}
		set
		{
			if ((this._Note != value))
			{
				this.OnNoteChanging(value);
				this.SendPropertyChanging();
				this._Note = value;
				this.SendPropertyChanged("Note");
				this.OnNoteChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_DomainsWeight", Storage="_DomainsWeights", ThisKey="Id", OtherKey="User")]
	public EntitySet<DomainsWeight> DomainsWeights
	{
		get
		{
			return this._DomainsWeights;
		}
		set
		{
			this._DomainsWeights.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_QuestionsWeight", Storage="_QuestionsWeights", ThisKey="Id", OtherKey="User")]
	public EntitySet<QuestionsWeight> QuestionsWeights
	{
		get
		{
			return this._QuestionsWeights;
		}
		set
		{
			this._QuestionsWeights.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_DomainsWeights(DomainsWeight entity)
	{
		this.SendPropertyChanging();
		entity.User1 = this;
	}
	
	private void detach_DomainsWeights(DomainsWeight entity)
	{
		this.SendPropertyChanging();
		entity.User1 = null;
	}
	
	private void attach_QuestionsWeights(QuestionsWeight entity)
	{
		this.SendPropertyChanging();
		entity.User1 = this;
	}
	
	private void detach_QuestionsWeights(QuestionsWeight entity)
	{
		this.SendPropertyChanging();
		entity.User1 = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DomainsWeights")]
public partial class DomainsWeight : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _User;
	
	private int _Domain;
	
	private float _Weight;
	
	private EntityRef<User> _User1;
	
	private EntityRef<Domain> _Domain1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserChanging(int value);
    partial void OnUserChanged();
    partial void OnDomainChanging(int value);
    partial void OnDomainChanged();
    partial void OnWeightChanging(float value);
    partial void OnWeightChanged();
    #endregion
	
	public DomainsWeight()
	{
		this._User1 = default(EntityRef<User>);
		this._Domain1 = default(EntityRef<Domain>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[User]", Storage="_User", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int User
	{
		get
		{
			return this._User;
		}
		set
		{
			if ((this._User != value))
			{
				this.OnUserChanging(value);
				this.SendPropertyChanging();
				this._User = value;
				this.SendPropertyChanged("User");
				this.OnUserChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Domain", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int Domain
	{
		get
		{
			return this._Domain;
		}
		set
		{
			if ((this._Domain != value))
			{
				if (this._Domain1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDomainChanging(value);
				this.SendPropertyChanging();
				this._Domain = value;
				this.SendPropertyChanged("Domain");
				this.OnDomainChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weight", DbType="Real NOT NULL")]
	public float Weight
	{
		get
		{
			return this._Weight;
		}
		set
		{
			if ((this._Weight != value))
			{
				this.OnWeightChanging(value);
				this.SendPropertyChanging();
				this._Weight = value;
				this.SendPropertyChanged("Weight");
				this.OnWeightChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_DomainsWeight", Storage="_User1", ThisKey="User", OtherKey="Id", IsForeignKey=true)]
	public User User1
	{
		get
		{
			return this._User1.Entity;
		}
		set
		{
			User previousValue = this._User1.Entity;
			if (((previousValue != value) 
						|| (this._User1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User1.Entity = null;
					previousValue.DomainsWeights.Remove(this);
				}
				this._User1.Entity = value;
				if ((value != null))
				{
					value.DomainsWeights.Add(this);
					this._User = value.Id;
				}
				else
				{
					this._User = default(int);
				}
				this.SendPropertyChanged("User1");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Domain_DomainsWeight", Storage="_Domain1", ThisKey="Domain", OtherKey="Id", IsForeignKey=true)]
	public Domain Domain1
	{
		get
		{
			return this._Domain1.Entity;
		}
		set
		{
			Domain previousValue = this._Domain1.Entity;
			if (((previousValue != value) 
						|| (this._Domain1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Domain1.Entity = null;
					previousValue.DomainsWeights.Remove(this);
				}
				this._Domain1.Entity = value;
				if ((value != null))
				{
					value.DomainsWeights.Add(this);
					this._Domain = value.Id;
				}
				else
				{
					this._Domain = default(int);
				}
				this.SendPropertyChanged("Domain1");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Questions")]
public partial class Question : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _Question1;
	
	private string _Answer;
	
	private int _Domain;
	
	private EntitySet<QuestionsWeight> _QuestionsWeights;
	
	private EntityRef<Domain> _Domain1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnQuestion1Changing(string value);
    partial void OnQuestion1Changed();
    partial void OnAnswerChanging(string value);
    partial void OnAnswerChanged();
    partial void OnDomainChanging(int value);
    partial void OnDomainChanged();
    #endregion
	
	public Question()
	{
		this._QuestionsWeights = new EntitySet<QuestionsWeight>(new Action<QuestionsWeight>(this.attach_QuestionsWeights), new Action<QuestionsWeight>(this.detach_QuestionsWeights));
		this._Domain1 = default(EntityRef<Domain>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Question", Storage="_Question1", DbType="NChar(100) NOT NULL", CanBeNull=false)]
	public string Question1
	{
		get
		{
			return this._Question1;
		}
		set
		{
			if ((this._Question1 != value))
			{
				this.OnQuestion1Changing(value);
				this.SendPropertyChanging();
				this._Question1 = value;
				this.SendPropertyChanged("Question1");
				this.OnQuestion1Changed();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Answer", DbType="NChar(20) NOT NULL", CanBeNull=false)]
	public string Answer
	{
		get
		{
			return this._Answer;
		}
		set
		{
			if ((this._Answer != value))
			{
				this.OnAnswerChanging(value);
				this.SendPropertyChanging();
				this._Answer = value;
				this.SendPropertyChanged("Answer");
				this.OnAnswerChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Domain", DbType="Int NOT NULL")]
	public int Domain
	{
		get
		{
			return this._Domain;
		}
		set
		{
			if ((this._Domain != value))
			{
				if (this._Domain1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDomainChanging(value);
				this.SendPropertyChanging();
				this._Domain = value;
				this.SendPropertyChanged("Domain");
				this.OnDomainChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_QuestionsWeight", Storage="_QuestionsWeights", ThisKey="Id", OtherKey="Question")]
	public EntitySet<QuestionsWeight> QuestionsWeights
	{
		get
		{
			return this._QuestionsWeights;
		}
		set
		{
			this._QuestionsWeights.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Domain_Question", Storage="_Domain1", ThisKey="Domain", OtherKey="Id", IsForeignKey=true)]
	public Domain Domain1
	{
		get
		{
			return this._Domain1.Entity;
		}
		set
		{
			Domain previousValue = this._Domain1.Entity;
			if (((previousValue != value) 
						|| (this._Domain1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Domain1.Entity = null;
					previousValue.Questions.Remove(this);
				}
				this._Domain1.Entity = value;
				if ((value != null))
				{
					value.Questions.Add(this);
					this._Domain = value.Id;
				}
				else
				{
					this._Domain = default(int);
				}
				this.SendPropertyChanged("Domain1");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_QuestionsWeights(QuestionsWeight entity)
	{
		this.SendPropertyChanging();
		entity.Question1 = this;
	}
	
	private void detach_QuestionsWeights(QuestionsWeight entity)
	{
		this.SendPropertyChanging();
		entity.Question1 = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.QuestionsWeights")]
public partial class QuestionsWeight : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _User;
	
	private int _Question;
	
	private float _Weight;
	
	private EntityRef<User> _User1;
	
	private EntityRef<Question> _Question1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserChanging(int value);
    partial void OnUserChanged();
    partial void OnQuestionChanging(int value);
    partial void OnQuestionChanged();
    partial void OnWeightChanging(float value);
    partial void OnWeightChanged();
    #endregion
	
	public QuestionsWeight()
	{
		this._User1 = default(EntityRef<User>);
		this._Question1 = default(EntityRef<Question>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[User]", Storage="_User", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int User
	{
		get
		{
			return this._User;
		}
		set
		{
			if ((this._User != value))
			{
				this.OnUserChanging(value);
				this.SendPropertyChanging();
				this._User = value;
				this.SendPropertyChanged("User");
				this.OnUserChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Question", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int Question
	{
		get
		{
			return this._Question;
		}
		set
		{
			if ((this._Question != value))
			{
				if (this._Question1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnQuestionChanging(value);
				this.SendPropertyChanging();
				this._Question = value;
				this.SendPropertyChanged("Question");
				this.OnQuestionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weight", DbType="Real NOT NULL")]
	public float Weight
	{
		get
		{
			return this._Weight;
		}
		set
		{
			if ((this._Weight != value))
			{
				this.OnWeightChanging(value);
				this.SendPropertyChanging();
				this._Weight = value;
				this.SendPropertyChanged("Weight");
				this.OnWeightChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_QuestionsWeight", Storage="_User1", ThisKey="User", OtherKey="Id", IsForeignKey=true)]
	public User User1
	{
		get
		{
			return this._User1.Entity;
		}
		set
		{
			User previousValue = this._User1.Entity;
			if (((previousValue != value) 
						|| (this._User1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User1.Entity = null;
					previousValue.QuestionsWeights.Remove(this);
				}
				this._User1.Entity = value;
				if ((value != null))
				{
					value.QuestionsWeights.Add(this);
					this._User = value.Id;
				}
				else
				{
					this._User = default(int);
				}
				this.SendPropertyChanged("User1");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_QuestionsWeight", Storage="_Question1", ThisKey="Question", OtherKey="Id", IsForeignKey=true)]
	public Question Question1
	{
		get
		{
			return this._Question1.Entity;
		}
		set
		{
			Question previousValue = this._Question1.Entity;
			if (((previousValue != value) 
						|| (this._Question1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Question1.Entity = null;
					previousValue.QuestionsWeights.Remove(this);
				}
				this._Question1.Entity = value;
				if ((value != null))
				{
					value.QuestionsWeights.Add(this);
					this._Question = value.Id;
				}
				else
				{
					this._Question = default(int);
				}
				this.SendPropertyChanged("Question1");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
